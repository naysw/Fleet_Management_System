// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  name      String
  username  String         @unique
  email     String?        @unique
  password  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  roles     UsersOnRoles[]
  invoices  Invoice[]
}

model Customer {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String?
  email     String?  @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  bookings Booking[]
  vehicles Vehicle[]
  invoices Invoice[]
}

model Service {
  id          String  @id @default(uuid())
  name        String
  price       Int
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Booking {
  id            String       @id @default(uuid())
  customerId    String
  customer      Customer     @relation(fields: [customerId], references: [id])
  from          String?
  to            String?
  duration      Int          @default(1) // 1 day
  notes         String       @db.Text
  status        String?      @default("ONGOING")
  vehicleId     String
  vehicle       Vehicle      @relation(fields: [vehicleId], references: [id])
  parkingSlot   ParkingSlot? @relation(fields: [parkingSlotId], references: [id])
  parkingSlotId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  invoices               Invoice[]
  additionalServiceItems AdditionalServiceItem[]
}

model AdditionalServiceItem {
  id String @id @default(uuid())

  name     String
  price    Float? @default(0)
  quantity Int?   @default(1)
  discount Int?   @default(0)

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  vehicles Vehicle[]
}

model Vehicle {
  id          String    @id @default(uuid())
  plateNumber String
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  mediaId     String?
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  bookings Booking[]
}

model ParkingSlot {
  id         String   @id @default(uuid())
  slotNumber String   @unique
  status     String   @default("free")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  bookings Booking[]
}

model Invoice {
  id            String @id @default(uuid())
  invoiceNumber String @unique @default(cuid())
  status        String @default("PENDING")
  amount        Float

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  payment Payment?
}

model Payment {
  id               String  @id @default(uuid())
  amount           Float   @default(0)
  status           String  @default("PENDING")
  customProperties Json?
  paidBy           String?
  description      String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  invoiceId String  @unique
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
}

model ActivityLog {
  id          String   @id @default(uuid())
  logName     String?
  description String   @db.Text
  subjectId   String?
  subjectType String?
  causerId    String?
  causerType  String?
  properties  Json?
  event       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Role {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  permissions RolesOnPermissons[]
  users       UsersOnRoles[]
}

model Permission {
  id   String @id @default(uuid())
  name String

  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
  roles     RolesOnPermissons[]
}

model RolesOnPermissons {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId String

  @@id([roleId, permissionId])
}

model UsersOnRoles {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String

  @@id([userId, roleId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  status    String   @default("IDLE")
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
